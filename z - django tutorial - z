----------------------------/primeiros passos/---------------------------------

        0) Criando repositorio
#crie o repositorio em uma organização

#dê fork nesse repositorio para seu usuario

#adicione o repositorio upstream no seu pycharm
git remote add upstream git@github.com:nomedogrupo/nomedoprojeto.git


        1) Copie os arquivos Pipfile, Pipfile.lock, .flake8, .travis.yml, Pipfile, Pipfile.lock, Procfile, pytest.ini da pasta "python/django/modelo" para o diretorio do seu projeto


        2) instale as dependencias com "pipenv sync -d"
# -- como deve estar o Pipfile --
{
[[source]]
url = "https://pypi.org/simple"
verify_ssl = true
name = "pypi"

[packages]
django = "*"
gunicorn = "*"
python-decouple = "*"

[dev-packages]
flake8 = "*"
pytest = "*"
coverage = "*"
pytest-cov = "*"
pytest-mock = "*"
pytest-django = "*"
codecov = "*"

[requires]
python_version = "3.9"
                        }


----------------------------/configurações/----------------------------

        3)configurar o interpretador do pycharm

add configuration>python
[
script path: manage.py
parameters: runserver
python interpreter: o da venv
working directory: o do seu projeto
                                ]

        4)configurar o pytest no pycharm

settings/tools/python integrated tools/default test runner>py.test
para rodar é iqual ao unittest, basta clicar no pacote/modulo/função
OBS: o running do pytest tbm roda testes escritos no formato do unittest

        5) Edite o arquivo "pytest.ini" com o path do seu settings
{
[pytest]
DJANGO_SETTINGS_MODULE = <diretoriodaaplicação>.settings
                                                        }


        6) configure o codecov.io

adicione o repositorio no site do codecov
adicione o markdown no readme (esta em settings badge)


        7)configure o travis.ci, substituindo o <nomedopacote> pelo correto.

PIPENV_VENV_IN_PROJECT=1  : para criar a venv no diretorio do projeto
PIPENV_IGNORE_VIRTUALENV=1  : para ignorar qualquer outra versao de virtual env que tenha sido criada
{
language: python
dist: xenial
sudo: true
python:
  - 3.9
env:
  global:
    - PIPENV_VENV_IN_PROJECT=1
    - PIPENV_IGNORE_VIRTUALENVS=1
install:
  - pip install -q pipenv
  - pipenv sync --dev
script:
  - pipenv run flake8
  - pipenv run pytest --cov <pacotedjango>
after_success:
  - pipenv run codecov
                        }


        8) edite o arquivo "Procfile" para dizer pro heroko como a aplicação vai rodar
#gunicorn é o servidor de aplicação, e o logfile é para enviar os logs pro heroko
{
web: gunicorn <pacotedjango>.wsgi --log-file -
                                                }

----------------------------/criar app e finalizar testes/----------------------------

        9) permitir todos os hosts: settings.py > ALLOWED_HOSTS = [*]


        10)criar app "base", que servira de base para novas apps
mng startapp base


        11)criar uma view "hello word"
#entre na app/views.py , e crie uma função helloword
{
from django.shortcuts import render
from django.http import HttpResponse
# Create your views here.

def home(request):
    return HttpResponse('Olá Django')
                                        }

        12)adicionar a view aos apps em pacote/settings.py
{
INSTALLED_APPS = [
        'modelodjango.base',
                           ]
                             }
        13)fazer mapeamento da função que esta na view, em pacote/urls.py
{
urlpatterns = [
        path('', home),
                ]
                        }
        14)apagar tudo que esta na pasta do app com exceção de view

        15)criar diretorio test dentro da app e verificar o test


        16) corrigir flake8 > testar aplicação > dar commit and push > pullrequest > verificar travis.ci


----------------------------/deploy heroku/----------------------------


        17) criar app no heroko, desabilitar "collecstatic" e enviar projeto pro heroko
#criar app no heroko
heroku apps:create nomedoapp

#checar se aparece o repositorio remoto do heroku
git remote -v

#desabilitar coleta de arquivos staticos
heroku config:set DISABLE_COLLECTSTATIC=1

#criar nova branch para enviar pro heroku (origin n da certo)

#enviar repositorio pro heroko
git push repositorioremoto branchlocal:branchremota -f
git push heroku branch1:master -f


        18)mudar deploy do heroku de (Heroku Git - use heroku cli) para (github)
#acesse o painel de configuração da aplicação> deploy
-selecione github
-verifique se a branch é a main
-marque a opção "Wait for CI to pass before deploy"
-confirme
-de um push + pull request para carregar no heroku
-confira se o build e deploy funcionaram


----------------------------/Outras configurações/----------------------------


	19)desacoplar configurações de instancia da aplicação
1 - importe config do pacote de 'decouple'
settings.py>DEBUG = config('DEBUG', cast=bool)

#a função vai procurar pela variavel que nomeamos como
'DEGUB', caso não exista uma variavel de ambiente com esse nome, ele vai procurar por ela
em uma arquivo chamado '.env' na raiz do projeto. A função recebe o parametro como string, entao
é preciso converter de volta usanto o parametro 'cast'

2 - crie arquivo '.env' com
DEBUG = True

3 - crie a variavel de ambiente para o heroku
heroku config:set DEBUG=False

OBS: se tiver deslogado o heroku use o comando (-a <nome_de_sua_app_no_heroku>) no final

4 - criar pasta 'contrib' na raiz do projeto
#para informar sobre as variaveis necessarias pro desenvolvedor

5 - criar arquivo 'env-sample' dentro de 'contrib' com o valor:
DEGUB = False

6 - disponibilizar o arquivo de configuração para o servidor de integração continua
#adicione em 'install'
- cp contrib/env-sample .env

    20)extrair a SECRET KEY do settings

1 - configure o decople para buscar a chave nas variaveis de ambiente ou na variavel 'SECRET_KEY' de .env
settings.py > SECRET_KEY = config('SECRET_KEY')
2 - adicione uma chave no seu '.env' do ambiente de desenvolvimento e no 'env-sample' da pasta 'contrib', que será
importado pro '.env' do travis
3 - crie uma chave secreta randomica para enviar pra aplicação de produção (heroku)
#entre no interpretador python da sua .venv
>>>from django.core.management.utils import get_random_secret_key
>>>get_random_secret_key()
4 - crie uma variavel de ambiente no heroku
#OBS: vc deve copiar a chave secreta com os parenteses, pois ela deve ser passada como string
heroku config:set SECRET_KEY=<sua_chave_secreta>
5 - confira as variaveis de ambiente do servidor heroku
heroku config